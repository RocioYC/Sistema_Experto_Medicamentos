import os
import sys
import re
import pandas as pd
from difflib import get_close_matches

# ---------------------------
# CONFIGURAR RUTAS
# ---------------------------
ruta_actual     = os.path.dirname(os.path.abspath(__file__))
ruta_base       = os.path.abspath(os.path.join(ruta_actual, ".."))
ruta_info       = os.path.join(ruta_base, "BaseConocimiento", "medicamentos_info.csv")
ruta_sustitutos = os.path.join(ruta_base, "BaseConocimiento", "sustitutos_medicamentos.csv")
ruta_alergenos  = os.path.join(ruta_base, "ReglasClinicas", "posibles_alergenos.csv")
ruta_clinical   = os.path.join(ruta_base, "01Hechos", "clinical_data.csv")  # Nueva ruta a√±adida

# ---------------------------
# CARGAR DATOS
# ---------------------------
_df_info        = pd.read_csv(ruta_info)
df_sust         = pd.read_csv(ruta_sustitutos)
df_alerg        = pd.read_csv(ruta_alergenos)
df_clinical     = pd.read_csv(ruta_clinical)  # Cargar datos cl√≠nicos
lista_alergenos = df_alerg["posibles_alergenos"].tolist()

# ---------------------------
# REGLAS CL√çNICAS
# ---------------------------

def regla_alergia_por_composicion(notas, composicion, alergenos):
    if pd.isna(notas) or pd.isna(composicion):
        return None
        
    nl = notas.lower()
    cl = composicion.lower()
    
    # Lista ampliada de patrones
    patrones = [
        "alergia a", "al√©rgico a", "alergia previa a", "reacci√≥n a",
        "alergia con", "hipersensibilidad a", "present√≥ urticaria con",
        "es al√©rgico a", "menciona que es al√©rgico a", "refiere alergia a",
        "alergia", "al√©rgico", "hipersensibilidad", "reacci√≥n adversa", 
        "intolerancia", "reacci√≥n cut√°nea", "urticaria por"
    ]
    
    # Extraer posibles menciones de alergias
    alergias_mencionadas = []
    for a in alergenos:
        a_lower = a.lower()
        
        # 1. Verificar si el al√©rgeno aparece directamente mencionado con alg√∫n patr√≥n
        for p in patrones:
            if f"{p} {a_lower}" in nl:
                # Verificar si el al√©rgeno o alguna parte est√° en la composici√≥n
                if a_lower in cl or any(parte in cl for parte in a_lower.split()):
                    return f"‚ùå Alergia detectada a {a}"
        
        # 2. Verificar si el al√©rgeno aparece solo como palabra en notas y en composici√≥n
        if re.search(r'\b' + re.escape(a_lower) + r'\b', nl) and a_lower in cl:
            return f"‚ùå Alergia detectada a {a}"
            
    return None


def regla_sintomas_vs_efectos_secundarios(notas, efectos_det, efectos):
    #   notas: texto libre con los s√≠ntomas o quejas del paciente.
    # efectos_det: efectos secundarios detallados 
    # efectos: efectos secundarios generales o resumidos

    if pd.isna(notas): #Si las notas est√°n vac√≠as o son NaN (no disponibles) = Termina
        return None
    
    texto_ef = '' #Cadena llamada texto_ef contiene todos los efectos secundarios disponibles
    if pd.notna(efectos_det): texto_ef += efectos_det + ' '
    if pd.notna(efectos): texto_ef += efectos

    #Si al final no se encontr√≥ ning√∫n efecto secundario = No se analiza
    if not texto_ef.strip(): return None

    #Se define un conjunto de "stopwords" / no aportan significado relevante
    stop = {"y","el","la","de","a","en","con","por","para","del","al","un","una","los","las"}
    # Estas se eliminar√°n para enfocar el an√°lisis solo en los t√©rminos importantes (dolor, fiebre, v√≥mito, etc.).

    tn = set(w for w in re.findall(r"\w+", notas.lower()) if w not in stop) #Se extraen todas las palabras de las notas cl√≠nicas
    te = set(w for w in re.findall(r"\w+", texto_ef.lower()) if w not in stop) # Se extraen todas las palabras efectos secundarios
    
    #Se calcula la intersecci√≥n de palabras entre s√≠ntomas (tn) y efectos secundarios (te).
    comunes = tn & te

    if comunes:
        sintomas = ", ".join(sorted(comunes)) #Las ordena y las convierte en un string separado por comas
        return f"‚ö†Ô∏è Podr√≠a agravar s√≠ntomas: {sintomas}" # Devuelve una advertencia textual mostrando los s√≠ntomas que podr√≠an agravarse
    return None



def contar_sintomas(riesgo):
    #RECIBE UN PAR√ÅMETRO riesgo, que es un texto (string)--> "‚ö†Ô∏è Podr√≠a agravar s√≠ntomas: v√≥mito, mareo"
    marker = "‚ö†Ô∏è Podr√≠a agravar s√≠ntomas:" #frase clave que indica el inicio de la lista de s√≠ntomas
    if marker not in riesgo: #no est√° dentro del texto recibido
        return 0
    
    sub = riesgo.split(marker, 1)[1] #Divide el texto en 2 partes usando marker como separador
    # Separamos los s√≠ntomas usando , Luego eliminamos espacios con .strip()
    sintomas = [s.strip() for s in sub.split(",") if s.strip()]
    return len(sintomas) #Devuelve la cantidad de s√≠ntomas encontrados

def evaluar_clase(c1, c2):
    # define una 2 CLASES TER√ÅPEUTICAS  c1 y c2
    # isinstance(n, str) = Asegura que ambos valores sean cadenas de texto
    return isinstance(c1, str) and isinstance(c2, str) and c1.strip().lower() == c2.strip().lower() #devuelve True o False

def obtener_componente_principal(comp):
    if pd.isna(comp): return "" #Si comp es nulo o no disponible = devuelve una cadena vac√≠a.

    #Separa el texto por el s√≠mbolo + (que indica m√∫ltiples compuestos)
    #Ahora separa por el par√©ntesis que contiene la dosis
    #"Amoxicilina (500mg) + √Åcido Clavul√°nico (125mg)" ->>>	"amoxicilina"
    return comp.lower().split('+')[0].split('(')[0].strip() 

# ---------------------------
# MOTOR DE SUSTITUTOS
# ---------------------------
def obtener_pares_sustitutos(med_en, df_sust):
    #med_en: nombre del medicamento actual en ingl√©s
    #df_sust: Dataset que contiene las columnas medicamento_en, sustituto1_en, sustituto1_es, ..., sustituto5_en, sustituto5_es.
    pairs = [] #Se usar√° para almacenar los pares (espa√±ol, ingl√©s) de los sustitutos encontrados.

    f = df_sust[df_sust["medicamento_en"].str.lower() == med_en.lower()] # FILTAR "medicamento_en" ==  med_en

    if not f.empty: #Si se encontr√≥ al menos una fila que coincide
        row = f.iloc[0] #toma la primera fila
        for i in range(1,6): #obtener el valor de las columnas
            en = row.get(f"sustituto{i}_en")
            es = row.get(f"sustituto{i}_es")

            if pd.notna(en) and pd.notna(es): 
                pairs.append((es.strip(), en.strip())) 
    return list({en:(es,en) for es,en in pairs}.values()) #Se construye un diccionario y elimina duplicados

def score_sustituto(es, en, notas, diagnostico, clase_act, alergenos):
# es: nombre del sustituto en espa√±ol (solo para mostrar).
# en: nombre del sustituto en ingl√©s (clave para buscar en la base).
# notas: s√≠ntomas del paciente (texto libre).
# diagnostico: diagn√≥stico del paciente.
# clase_act: clase terap√©utica del medicamento original.
# alergenos: lista de alergias del paciente.

    # 1. B√∫squeda del medicamento en el dataset:
    f = _df_info[
        (_df_info["medicamento"].str.lower() == en.lower()) |
        (_df_info["composicion"].str.lower().str.contains(en.lower(), na=False))
    ]
    if f.empty: # Si no se encontr√≥ informaci√≥n del medicamento
        return -5, "‚ö†Ô∏è Informaci√≥n no encontrada"
    d = f.iloc[0] #Toma la primera fila encontrada (d) como fuente de datos del sustituto

    #   Inicializa el puntaje en 0.
    # just ser√° una lista de textos explicativos que se ir√°n sumando
    score, just = 0, []
# ------------------------------------------------------------------------------------------
# ‚úÖ CRITERIOS DE EVALUACI√ìN -----------------------------------------
# ------------------------------------------------------------------------------------------
    if d["review_excelente"] >= 50:
        score += 1; just.append("‚úîÔ∏è Buen puntaje de review")
    
    comp = obtener_componente_principal(d.get("composicion", ""))
    if comp:
        score += 3; just.append("‚úîÔ∏è Mismo componente principal")
    
    if evaluar_clase(clase_act, d.get("clase terapeutica", "")):
        score += 2; just.append("‚úîÔ∏è Misma clase terap√©utica")
    
    # Verifica si el diagn√≥stico del paciente aparece dentro de los usos del medicamento
    indicaciones = str(d.get("usos", "") or "") + " " + str(d.get("usos_clinicos_ext", "") or "")
    if not pd.isna(diagnostico) and diagnostico.lower() in indicaciones.lower():
        score += 2  # Mayor peso por la indicaci√≥n directa
        just.append(f"‚úîÔ∏è Indicado espec√≠ficamente para {diagnostico}")
    
    # Por cada s√≠ntoma coincidente, se resta 1 punto.
    riesgo = regla_sintomas_vs_efectos_secundarios(
        notas,
        d.get("efectos_secundarios_detallados", ""),
        d.get("efectos_secundarios", "")
    )
    if riesgo:
        n = contar_sintomas(riesgo)
        score -= n
        just.append(riesgo)

    # Si detecta alergia, se restan 10 puntos (criterio grave).
    alerg = regla_alergia_por_composicion(notas,d.get("composicion", ""),alergenos)
    if alerg:
        score -= 10; just.append(alerg)
    return score, ", ".join(just)

# ---------------------------
# PERFIL DEL PACIENTE
# ---------------------------
# Usar el primer registro del CSV de datos cl√≠nicos
if df_clinical.empty:
    print("‚ùå No hay datos cl√≠nicos disponibles.")
    sys.exit()

# Obtener datos del primer registro en el CSV
registro_paciente = df_clinical.iloc[0]
notas = registro_paciente["notas_clinicas"]
med_input = registro_paciente["medicamentos"]
diagnostico = registro_paciente["diagnosticos"]

print(f"\nüìã DATOS DEL PACIENTE:")
print(f"üè• Notas cl√≠nicas: {notas}")
print(f"ü©∫ Diagn√≥stico: {diagnostico}")
print(f"üíä Medicamento actual: {med_input}\n")

#------------------------------------------------------------
# Crea los diccionarios de mapeo entre idioma
#-----------------------------------------------------------

in_lower = med_input.lower().strip()
map_en = {}
map_es = {}  # Nuevo diccionario para mapear nombres en ingl√©s a espa√±ol
for _, r in df_sust.iterrows():
    en_name = r["medicamento_en"].lower().strip()
    es_name = r["medicamento_principal"].lower().strip()
    map_en[en_name] = en_name
    map_en[es_name] = en_name
    map_es[en_name] = es_name  # Guardar el mapeo de ingl√©s a espa√±ol

#------------------------------------------
# Busca coincidencia exacta
#---------------------------------------------

if in_lower in map_en:
    med_act_en = map_en[in_lower]
    fila_act   = _df_info[_df_info["medicamento"].str.lower()==med_act_en].iloc[0]
    # Obtener nombre en espa√±ol si existe
    med_act_es = map_es.get(med_act_en, med_act_en)  # Si no existe, usar el nombre en ingl√©s
else:
    # Si no hay coincidencia exacta: busca por palabras clave
    toks = re.findall(r"\w+", in_lower) # Divide el texto en palabras individuales

    #Elimina las stopwords m√©dicas
    stop = {"mg","pp","p","de","la","el","en","crema","gel","tableta","capsula","%"}
    kws = [t for t in toks if t not in stop]  # Conserva solo las palabras clave (kws) para buscar.

    #Filtra el DATASET buscando esas palabras en medicamento o composici√≥n
    mask = pd.Series(True, index=_df_info.index)
    for k in kws:
        pat = rf"\b{re.escape(k)}\b"
        mask &= (
            _df_info["medicamento"].str.lower().str.contains(pat, na=False) |
            _df_info["composicion"].str.lower().str.contains(pat, na=False)
        )

    # Si encuentra alguna coincidencia Asume que ese es el medicamento buscado.
    if mask.any():
        fila_act = _df_info[mask].iloc[0]
        med_act_en = fila_act["medicamento"]

        # Buscar nombre en espa√±ol
        med_act_es = map_es.get(med_act_en.lower(), med_act_en)
    
    # Si no encuentra nada: usa coincidencia aproximada
    else:
        matches = get_close_matches(in_lower, _df_info["medicamento"].str.lower(), n=1, cutoff=0.6)
        if matches:
            fila_act = _df_info[_df_info["medicamento"].str.lower()==matches[0]].iloc[0]
            med_act_en = fila_act["medicamento"]
            # Buscar nombre en espa√±ol
            med_act_es = map_es.get(med_act_en.lower(), med_act_en)
        else:
            print("‚ùå Medicamento actual no encontrado.")
            sys.exit()

clase_act = fila_act.get("clase terapeutica", "")
review_act = fila_act["review_excelente"]
composicion_act = fila_act.get("composicion", "")
comp_principal = obtener_componente_principal(composicion_act)

# ---------------------------------------------------------------------
# EVALUAR SUSTITUTOS (primera l√≠nea)
# -------------------------------------------------------------------------
sust_pairs = obtener_pares_sustitutos(med_act_en, df_sust)
puntajes = [(es, sc, js)
        for es, en in sust_pairs
        for sc, js in [score_sustituto(es, en, notas, diagnostico, clase_act, lista_alergenos)]]

en_orden = sorted(puntajes, key=lambda x: (x[1], -contar_sintomas(x[2])), reverse=True)

omitidos_primera = {n for n, sc, js in en_orden if "‚ö†Ô∏è Informaci√≥n no encontrada" in js or "‚ùå Alergia detectada" in js}
validos_primera = [c for c in en_orden if c[0] not in omitidos_primera]

# Inicializar los candidatos principales
candidatos_finales = []
if validos_primera:
    candidatos_finales.extend(validos_primera)
    top_n, top_s, top_j = validos_primera[0]
else:
    # No hay candidatos v√°lidos en primera l√≠nea
    top_n, top_s, top_j = None, -999, "Sin candidatos v√°lidos"

# Funci√≥n auxiliar para buscar nombre en espa√±ol para un medicamento dado
def obtener_nombre_espanol(nombre_en, map_es_dict):
    """Busca el nombre en espa√±ol de un medicamento que est√° en ingl√©s"""
    return map_es_dict.get(nombre_en.lower(), nombre_en)

# -----------------------------------------------------------
# BUSCAR ALTERNATIVAS (segunda l√≠nea)
# ----------------------------------------------------------
# Preparar para b√∫squeda alternativa
cand = _df_info[_df_info["clase terapeutica"].str.lower() == clase_act.lower()]

# Buscar medicamentos que tengan indicaci√≥n para el diagn√≥stico espec√≠fico
if not pd.isna(diagnostico):
    diagnostico_lower = diagnostico.lower()
    mask_diag = (
        cand["usos"].str.lower().str.contains(diagnostico_lower, na=False) | 
        cand["usos_clinicos_ext"].str.lower().str.contains(diagnostico_lower, na=False)
    )
    # Si encontramos medicamentos espec√≠ficos para el diagn√≥stico, priorizarlos
    cand_diag = cand[mask_diag]
    if not cand_diag.empty:
        cand = cand_diag
        print(f"üéØ Se priorizan medicamentos indicados espec√≠ficamente para {diagnostico}")

# Continuar con la b√∫squeda por usos si es necesario
uso_str = (fila_act.get("usos", "") or fila_act.get("usos_clinicos_ext", "")).lower()
uso_toks = re.findall(r"\w+", uso_str)
mask_u = pd.Series(False, index=cand.index)
for t in uso_toks:
    mask_u |= cand["usos"].str.lower().str.contains(t, na=False)
    mask_u |= cand["usos_clinicos_ext"].str.lower().str.contains(t, na=False)
cand = cand[mask_u]
usados = {med_act_en.lower()} | {es_name.lower() for es_name, _ in sust_pairs}
cand = cand[~cand["medicamento"].str.lower().isin(usados)]
patient_al = [a for a in lista_alergenos if a in notas.lower()]
if patient_al:
    mask_ok = pd.Series(True, index=cand.index)
    for a in patient_al:
        mask_ok &= ~cand["composicion"].str.lower().str.contains(a, na=False)
    cand = cand[mask_ok]

alt = []
if not cand.empty:
    for row in cand.head(5).itertuples():
        enm = row.medicamento
        sc, js = score_sustituto(enm, enm, notas, diagnostico, clase_act, lista_alergenos)
        alt.append((enm, sc, js))

    alt = sorted(alt, key=lambda x: (x[1], -contar_sintomas(x[2])), reverse=True)
    candidatos_finales.extend(alt)

# ---------------------------
# DETERMINAR SUGERENCIA FINAL (aplicando regla de prioridad)
# ---------------------------
# Regla de prioridad: Si hay al menos un sustituto directo v√°lido, se elige ese
# sin considerar los alternativos. Solo si no hay sustitutos directos v√°lidos,
# se consideran los alternativos.

usar_alternativos = False
if validos_primera:
    # Hay al menos un sustituto directo v√°lido, elegimos el mejor de ellos
    best_n, best_s, best_j = validos_primera[0]
    fuente_recomendacion = "primera_linea"
elif alt:
    # No hay sustitutos directos v√°lidos, usamos los alternativos
    usar_alternativos = True
    best_n, best_s, best_j = alt[0]
    fuente_recomendacion = "alternativa"
else:
    print("‚ùå No se encontraron sustitutos v√°lidos.")
    sys.exit()

# ---------------------------
# SALIDA FINAL - ENFOCADA EN COMPOSICI√ìN
# ---------------------------

# Funci√≥n para obtener la composici√≥n a partir del nombre
def obtener_composicion(nombre_medicamento):
    # Primero verificamos si el input ya es una composici√≥n con concentraci√≥n
    if "(" in nombre_medicamento and ")" in nombre_medicamento:
        return nombre_medicamento  # Ya es una composici√≥n, la devolvemos directamente
    
    # Si no, buscamos en el DataFrame
    fila = _df_info[_df_info["medicamento"].str.lower() == nombre_medicamento.lower()]
    if not fila.empty:
        return fila.iloc[0]["composicion"]
    
    # Si no est√° como medicamento, verificamos si coincide con alguna composici√≥n
    fila_comp = _df_info[_df_info["composicion"].str.lower() == nombre_medicamento.lower()]
    if not fila_comp.empty:
        return fila_comp.iloc[0]["composicion"]
        
    return "Composici√≥n no encontrada"

# Funci√≥n para obtener efectos secundarios
def obtener_efectos(nombre_medicamento):
    fila = _df_info[_df_info["medicamento"].str.lower() == nombre_medicamento.lower()]
    if not fila.empty:
        efectos_raw = fila.iloc[0]["efectos_secundarios"]
        if pd.notna(efectos_raw) and efectos_raw:
            return efectos_raw
    return "No disponibles"

# Imprimir encabezado con l√≠nea separadora
print("\n" + "="*60)
print(" AN√ÅLISIS FARMACOL√ìGICO - RESULTADO ".center(60, "="))
print("="*60 + "\n")

# Informaci√≥n medicamento actual (BASADO EN COMPOSICI√ìN)
print(f"üß¨ COMPOSICI√ìN ACTUAL: {composicion_act.upper()}")
print(f"   ‚îî‚îÄ Nombre comercial: {med_act_es.upper()}")
print(f"   ‚îî‚îÄ Clase terap√©utica: {clase_act}")

# Informaci√≥n medicamento sugerido (BASADO EN COMPOSICI√ìN)
composicion_sugerida = obtener_composicion(best_n)
print(f"\n‚úÖ COMPOSICI√ìN SUGERIDA: {composicion_sugerida.upper()}")
print(f"   ‚îî‚îÄ Score de compatibilidad: {best_s}")
print(f"   ‚îî‚îÄ Nombre comercial: {best_n.upper()}")
print(f"   ‚îî‚îÄ Justificaci√≥n: {best_j}")

# Mostrar mensaje indicando el origen de la recomendaci√≥n
if fuente_recomendacion == "primera_linea":
    print("\nüîç Origen: Sustituto directo prioritario (misma composici√≥n o similar)")
else:
    print("\nüîç Origen: Alternativa terap√©utica (misma clase terap√©utica y uso cl√≠nico)")

# Informaci√≥n sobre efectos secundarios del medicamento sugerido
efectos_sust = obtener_efectos(best_n)
if efectos_sust != "No disponibles":
    print(f"\n‚ö†Ô∏è EFECTOS SECUNDARIOS A CONSIDERAR: {efectos_sust}")

print("\n" + "="*60)

# ---------------------------
# OPCI√ìN DETALLE - ENFOCADA EN COMPOSICI√ìN
# ---------------------------
resp = input("¬øDeseas ver el an√°lisis farmacol√≥gico detallado? (si/no): ").strip().lower()
if resp not in ("si", "s", "yes", "y"):
    print("Proceso terminado.")
    sys.exit()

# Encabezado del an√°lisis detallado
print("\n" + "="*80)
print(" AN√ÅLISIS FARMACOL√ìGICO DETALLADO ".center(80, "="))
print("="*80 + "\n")

# SECCI√ìN 1: INFORMACI√ìN DEL MEDICAMENTO ACTUAL
print("üìä INFORMACI√ìN FARMACOL√ìGICA ACTUAL\n" + "-"*40)
print(f"üß¨ COMPOSICI√ìN: {composicion_act.upper()}")
print(f"üì¶ Nombre comercial: {med_act_es.upper()}")
print(f"üìà Evaluaci√≥n cl√≠nica: {review_act}")
print(f"üìë Clase terap√©utica: {clase_act}")
print(f"üéØ Componente principal: {comp_principal}\n")

# SECCI√ìN 2: SUSTITUTOS DIRECTOS (TABLA)
print("üîÑ SUSTITUTOS DIRECTOS EVALUADOS (POR COMPOSICI√ìN)\n" + "-"*80)
print(f"{'COMPOSICI√ìN':^40} | {'SCORE':^8} | {'ESTADO':^25}")
print("-"*80)

# Recorremos los sustitutos directos
for name, score, just in en_orden[:5]:
    # Obtener la composici√≥n - maneja tanto nombres comerciales como compuestos ya formateados
    compo = obtener_composicion(name)
    
    # Determinar estado del medicamento
    estado = "‚úÖ V√ÅLIDO"
    if "‚ùå Alergia detectada" in just:
        estado = "‚ùå ALERGIA DETECTADA"
    elif just.startswith("‚ö†Ô∏è Informaci√≥n no encontrada"):
        estado = "‚ö†Ô∏è INFO INCOMPLETA"
    
    # Mostrar fila de la tabla
    print(f"{compo.upper():<40} | {score:^8} | {estado:<25}")
    # Mostrar justificaci√≥n resumida
    just_resumida = just[:80] + "..." if len(just) > 80 else just
    print(f"   ‚îî‚îÄ {just_resumida}")
    print("-"*80)

# Mejor sustituto directo (si existe)
if validos_primera:
    mejor_nombre = validos_primera[0][0]
    mejor_comp = obtener_composicion(mejor_nombre)
    print(f"\n‚úÖ MEJOR SUSTITUTO DIRECTO: {mejor_comp.upper()}")
    print(f"   ‚îî‚îÄ Score: {validos_primera[0][1]}")
    print(f"   ‚îî‚îÄ Justificaci√≥n: {validos_primera[0][2]}\n")
else:
    print("\n‚ùó No se encontraron sustitutos directos v√°lidos (sin alergias ni informaci√≥n faltante).\n")

# Manejo de omitidos y alternativas
omitted = []
for name, score, just in en_orden[:5]:
    if "‚ùå Alergia detectada" in just:
        omitted.append((name, "alergia"))
    elif just.startswith("‚ö†Ô∏è Informaci√≥n no encontrada"):
        omitted.append((name, "informaci√≥n no encontrada"))

if omitted:
    for name, reason in omitted:
        compo = obtener_composicion(name)
        print(f"‚ö†Ô∏è El medicamento con composici√≥n {compo.upper()} se omite por {reason}.\n")

# SECCI√ìN 3: ALTERNATIVAS TERAP√âUTICAS
if alt:
    print("\nüîÑ ALTERNATIVAS TERAP√âUTICAS (MISMA CLASE Y USO CL√çNICO)\n" + "-"*80)
    print(f"{'COMPOSICI√ìN':^40} | {'SCORE':^8} | {'COMPATIBILIDAD':^25}")
    print("-"*80)
    
    for n, sc, j in alt:
        compo = obtener_composicion(n)
        print(f"{compo.upper():<40} | {sc:^8} | {'ALTA' if sc > 0.7 else 'MEDIA':<25}")
        just_resumida = j[:80] + "..." if len(j) > 80 else j
        print(f"   ‚îî‚îÄ {just_resumida}")
        print("-"*80)
    
    if not validos_primera:
        mejor_comp = obtener_composicion(alt[0][0])
        print(f"\n‚úÖ MEJOR ALTERNATIVA TERAP√âUTICA: {mejor_comp.upper()}")
        print(f"   ‚îî‚îÄ Score: {alt[0][1]}")
        print(f"   ‚îî‚îÄ Justificaci√≥n: {alt[0][2]}\n")
    else:
        print("\n‚ÑπÔ∏è Las alternativas terap√©uticas no se consideran debido a que existen sustitutos directos v√°lidos.\n")

# SECCI√ìN 4: RECOMENDACI√ìN FINAL
compo_final = obtener_composicion(best_n)
print("\n" + "="*80)
print(" RECOMENDACI√ìN FINAL ".center(80, "="))
print("="*80)
print(f"\nüèÜ COMPOSICI√ìN RECOMENDADA: {compo_final.upper()}")
print(f"   ‚îî‚îÄ Score: {best_s}")
print(f"   ‚îî‚îÄ Nombre comercial: {best_n.upper()}")
print(f"   ‚îî‚îÄ Justificaci√≥n: {best_j}")

# Indicar fuente de la recomendaci√≥n
print(f"\nüìã ORIGEN DE LA RECOMENDACI√ìN:")
if fuente_recomendacion == "primera_linea":
    print("   ‚îî‚îÄ Sustituto directo prioritario (misma composici√≥n o similar)")
else:
    print("   ‚îî‚îÄ Alternativa terap√©utica (mismo mecanismo de acci√≥n y uso cl√≠nico)")

# Efectos secundarios del sustituto recomendado
efectos_finales = obtener_efectos(best_n)
if efectos_finales != "No disponibles":
    print(f"\n‚ö†Ô∏è EFECTOS SECUNDARIOS A CONSIDERAR:")
    print(f"   ‚îî‚îÄ {efectos_finales}")

print("\n" + "="*80)